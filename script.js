var fight, job, time_input, hp_input;

// HP Data
const hpData = {
    basic: [92480, 103200, 96160, 92480, 109120, 104320, 107520, 164960, 158240, 152640, 166080, 137600, 136960, 136960, 161280, 151840, 162880],

    bismarck: [100960, 112640, 104960, 100960, 119040, 113920, 117440, 180000, 172640, 166560, 181280, 150240, 149440, 149440, 176160, 165760, 177760],

    thordan: [125760, 140480, 130720, 125760, 148320, 141920, 146240, 224320, 215040, 207520, 225760, 187040, 186240, 186240, 219360, 206400, 221600],

    sephirot: [143360, 160000, 148960, 143360, 168960, 161600, 166560, 255520, 244960, 236480, 257280, 213120, 212160, 212160, 249920, 235200, 252320],

    nidhogg: [168480, 188000, 175040, 168480, 192960, 184480, 190080, 291680, 279680, 269760, 293600, 243200, 242080, 242080, 285280, 268480, 288000],

    sophia: [191840, 214240, 199520, 191840, 219680, 210240, 216640, 332160, 318560, 307360, 334400, 277120, 275840, 275840, 324960, 305760, 328160],

    zurvan: [219040, 244480, 227680, 219040, 250880, 239840, 247200, 379200, 363520, 350880, 381760, 334560, 336480, 336480, 370880, 358880, 374400],

    gordias: [110240, 123040, 114560, 110240, 129920, 124320, 128160, 196480, 188480, 181760, 197760, 163840, 163200, 163200, 192160, 180800, 194080],

    a1s: [120320, 134240, 124960, 120320, 141920, 135680, 139840, 214560, 205600, 198400, 216000, 178880, 178080, 178080, 209760, 197440, 211840],

    a2s: [125760, 140480, 130720, 125760, 148320, 141920, 146240, 224320, 215040, 207520, 225760, 187040, 186240, 186240, 219360, 206400, 221600],

    a3s: [137280, 153280, 142720, 137280, 161920, 154880, 159520, 244800, 234720, 226560, 246400, 204160, 203200, 203200, 239360, 225280, 241760],

    a4s: [143360, 160000, 148960, 143360, 168960, 161600, 166560, 255520, 244960, 236480, 257280, 213120, 212160, 212160, 249920, 235200, 252320],

    midas: [131360, 146560, 136480, 131360, 154880, 148160, 152640, 234080, 224480, 216640, 235680, 195360, 194400, 194400, 228960, 215520, 231200],

    a5s: [161120, 179840, 167360, 161120, 184480, 176480, 181760, 278880, 267360, 258080, 280800, 232640, 231520, 231520, 272800, 256640, 275360],

    a6s: [168480, 188000, 175040, 168480, 192960, 184480, 190080, 291680, 279680, 269760, 293600, 243200, 242080, 242080, 285280, 268480, 288000],

    a7s: [183840, 205280, 191040, 183840, 210560, 201440, 207520, 318240, 305120, 294560, 320480, 265440, 264320, 264320, 311360, 292960, 314400],

    a8s: [191840, 214240, 199520, 191840, 219680, 210240, 216640, 332160, 318560, 307360, 334400, 277120, 275840, 275840, 324960, 305760, 328160],

    creator: [175840, 196320, 182720, 175840, 201280, 192640, 198400, 304320, 291840, 281600, 306400, 268640, 270240, 270240, 297760, 288160, 300640],

    a9s: [209440, 233760, 217600, 209440, 239840, 229440, 236320, 362560, 347680, 335520, 364960, 320000, 321920, 321920, 354560, 343200, 358080],

    a10s: [219040, 244480, 227680, 219040, 250880, 239840, 247200, 379200, 363520, 350880, 381760, 334560, 336480, 336480, 370880, 358880, 374400],

    a11s: [228640, 255200, 237600, 228640, 261760, 250400, 257920, 395680, 379360, 366080, 398400, 349280, 351200, 351200, 387040, 374560, 390880],

    a12s: [249440, 278560, 259360, 249440, 285760, 273280, 281600, 432000, 414080, 399680, 434880, 381120, 383360, 383360, 422400, 408800, 426560],

    shinryu: [363537, 365255, 344645, 363537, 397315, 357812, 330905, 607995, 569637, 607995, 629750, 519257, 523265, 523265, 640055, 610857, 603415],

    delta: [377850, 379567, 358385, 377850, 413345, 372125, 345522, 632040, 591965, 631467, 654940, 539867, 543875, 543875, 665245, 634902, 627460],

    sigma: [488342, 531280, 488915, 488342, 504372, 454565, 420215, 768867, 722495, 741960, 791767, 682420, 699595, 699595, 840430, 802072, 758562],

    alpha: [587957, 640055, 589102, 587957, 607422, 547310, 506090, 926305, 870772, 894245, 966380, 822110, 842720, 842720, 1049965, 966380, 941190],

    susano: [390445, 392162, 370407, 390445, 427085, 384720, 355522, 653222, 612002, 653222, 677267, 558187, 562195, 562195, 687572, 656085, 648642],

    lakshmi: [390445, 392162, 370407, 390445, 427085, 384720, 355522, 653222, 612002, 653222, 677267, 558187, 562195, 562195, 687572, 656085, 648642],

    shinryu_ex: [532997, 589675, 533570, 532997, 489487, 440825, 407620, 740815, 701312, 732227, 780890, 669252, 690435, 690435, 800927, 778027, 752837],

    byakko: [574217, 624597, 574790, 574217, 553607, 499220, 461435, 844437, 793485, 815240, 869055, 749402, 768295, 768295, 922870, 881077, 832987],

    tsukyomi: [609712, 663527, 610285, 609712, 589675, 531280, 491205, 898825, 845010, 867910, 925160, 797492, 818102, 818102, 982982, 937755, 886802],

    suzako: [688145, 748830, 689290, 688145, 668680, 602842, 557042, 1020195, 958365, 984700, 1064277, 905122, 928022, 928022, 1156450, 1063705, 1036797],

    seiryu: [729937, 794057, 731082, 729937, 711045, 640627, 592537, 1094620, 1019050, 1046530, 1131260, 961800, 1011607, 1011607, 1229157, 1131260, 1102062],

    o1s: [462580, 464870, 439107, 462580, 469450, 423077, 391017, 718487, 672687, 717915, 744250, 613720, 618300, 618300, 756272, 721350, 713335],

    o2s: [476892, 479182, 452275, 476892, 484335, 436245, 403612, 740815, 684442, 740815, 767722, 633185, 637765, 637765, 780317, 744250, 735662],

    o3s: [491205, 493495, 466015, 491205, 499220, 449985, 415625, 763715, 715625, 763715, 791195, 652650, 657230, 657230, 804362, 767150, 758562],

    o4s: [520402, 522692, 493495, 520402, 530707, 478037, 441970, 811805, 760280, 811232, 841002, 693870, 698450, 698450, 854742, 815240, 806080],

    o5s: [591965, 644062, 592537, 591965, 571355, 515250, 476320, 871917, 819247, 841575, 897107, 773447, 793485, 793485, 952640, 909130, 859895],

    o6s: [609712, 663527, 610285, 609712, 589675, 531280, 491205, 898825, 845010, 867910, 925160, 797492, 818102, 818102, 982982, 937755, 886802],

    o7s: [627460, 682420, 628605, 627460, 607422, 547310, 506090, 926305, 870772, 894245, 953785, 822110, 842720, 842720, 1012752, 966380, 913710],

    o8s: [668680, 727647, 669825, 668680, 649215, 585095, 541012, 990425, 930885, 956075, 1019622, 878787, 901115, 901115, 1082597, 1033362, 977257],

    o9s: [707037, 769440, 708182, 707037, 688145, 620017, 573072, 1049392, 986417, 1012752, 1095192, 930885, 954930, 954930, 1189655, 1094620, 1066567],

    o10s: [729937, 794057, 731082, 729937, 711045, 640627, 592537, 1084315, 1019050, 1046530, 1131260, 961800, 986417, 986417, 1229157, 1131260, 1102062],

    o11s: [752265, 818675, 753410, 752265, 733945, 661237, 611430, 1119237, 1051682, 1080307, 1167327, 992715, 1018477, 1018477, 1268660, 1167327, 1136985],

    o12s: [796347, 866765, 797492, 796347, 779172, 701885, 649215, 1187937, 1116375, 1146717, 1240035, 1053972, 1081452, 1081452, 1347092, 1239462, 1207402],

    hades: [1127760, 1065600, 1086320, 1123320, 1157360, 957560, 861360, 1762680, 1793760, 1574720, 1758240, 1576200, 1712360, 1327560, 1963960, 1700520, 1685720],

    eden: [1167720, 1102600, 1124800, 1163280, 1197320, 991600, 890360, 1824840, 1857400, 1629480, 1818920, 1632440, 1771560, 1374920, 2033520, 1759720, 1744920],

    titania: [1210640, 1142560, 1164760, 1204720, 1240240, 1027120, 923520, 1889960, 1924000, 1688680, 1884040, 1691640, 1836680, 1423760, 2106040, 1823360, 1808560],

    innocence: [1210640, 1142560, 1164760, 1204720, 1240240, 1027120, 923520, 1889960, 1924000, 1688680, 1884040, 1691640, 1836680, 1423760, 2106040, 1823360, 1808560],

    hades_ex: [1358640, 1308320, 1330520, 1364560, 1407480, 1157360, 1130720, 2184480, 2211120, 2150440, 2292520, 1904760, 2193360, 1681280, 2468640, 2294000, 2239240],

    e1s: [1330520, 1258000, 1281680, 1326080, 1364560, 1130720, 1016760, 2079400, 2052760, 1857400, 2073480, 1860360, 2020200, 1567320, 2316200, 2005400, 1989120],

    e2s: [1371960, 1296480, 1321640, 1367520, 1407480, 1164760, 1047840, 2144520, 2117880, 1916600, 2138600, 1918080, 2082360, 1616160, 2388720, 2069040, 2051280],

    e3s: [1413400, 1336440, 1361600, 1408960, 1450400, 1200280, 1080400, 2209640, 2181520, 1974320, 2202240, 1975800, 2146000, 1665000, 2462720, 2131200, 2113440],

    e4s: [1502200, 1419320, 1447440, 1497760, 1540680, 1275760, 1147000, 2347280, 2319160, 2097160, 2341360, 2100120, 2280680, 1768600, 2616640, 2265880, 2246640]
};

hp_input = document.getElementById("hp-left");
time_input = document.getElementById("time-left");


function jobSelect() {
    job = document.querySelector('input[name="job-input"]:checked').value;
}

function fightSelect(num) {
    let fight_input = document.getElementById("fight-input" + num);
    fight = fight_input.value;
}

function clearTimeLeft() {
    time_input.value = 0;
}

function clearHpLeft() {
    hp_input.value = 0;
}

function xpacSelect(expac) {
    document.getElementById("heavensward").classList.remove("hidden");
    document.getElementById("stormblood").classList.remove("hidden");
    document.getElementById("shadowbringers").classList.remove("hidden");

    document.getElementById("heavensward").classList.add("hidden");
    document.getElementById("stormblood").classList.add("hidden");
    document.getElementById("shadowbringers").classList.add("hidden");

    document.getElementById(expac).classList.remove("hidden");

    
}

function calcDps() {
    var dps, hpLeft, maxHp, timeLeft, maxTime, result_text;

    // Set Variables
    result_text = document.querySelector("#result-text");
    maxTime = 180;
    timeLeft = time_input.value;
    hpLeft = hp_input.value;

    // Calculate DPS

    result_text.classList.remove("input-error");

    if (hp_input.value < 0 || hp_input.value > 100) {
        result_text.innerHTML = "HP should be between 0 and 100%";
        result_text.classList.add("input-error");
    } else if (time_input.value < 0 || time_input.value > 180) {
        result_text.innerHTML = "Time left should be between 0 and 180 seconds";
        result_text.classList.add("input-error");
    } else if (!hp_input.value && !time_input.value) {
        result_text.innerHTML = "Please enter HP or Time left.";
        result_text.classList.add("input-error");
    } else if (!job) {
        result_text.innerHTML = "Please select a Job!";
        result_text.classList.add("input-error");
    } else if (!fight) {
        result_text.innerHTML = "Please select a Fight!";
        result_text.classList.add("input-error");
    } else {
        maxHp = hpData[fight][job];

        dps = ((100 - hpLeft) * maxHp) / 100 / (maxTime - timeLeft);
        // Update UI
        result_text.innerHTML = "You did <span id=result>" + dps.toFixed(2) + " DPS!</span>";
    }
}
